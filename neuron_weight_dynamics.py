# -*- coding: utf-8 -*-
"""Neuron - weight dynamics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ezjMT4EXuAVlQRTUWq6zARkXyxy0Kd_-

# **Dynamics of the weights of an Artificial Neural Network**
____


author: Max Nascimento

linkedin: linkedin.com/in/max-nascimento-4b19ba109

email: maxpnascimento@gmail.com

**Libraries**
"""

#Libraries
from numpy import exp, array, random, dot

"""**Activation function**"""

#Activation function - Sigmoid
def sig(x): 
  return 1 / (1 + exp(-x))
  
#Derivative
def sig_d(x): 
  return x * (1 - x)

"""**Neuron**"""

#Random Number Generation
random.seed(1)

#Defined weights (randomly)
weights = random.random((3,1))

print("Defined weights (randomly) \n", weights)

#Neuron output
def output(x):
 return sig(dot(x, weights))

"""**Train Data**
   
     input     output
    0  0  1      0
    1  1  1      1
    1  0  1      1
    0  1  0      0


Looking at the data, we see that the X1 input is the most important and defines the output.


"""

X_Train = array([[0,0,1],
                 [1,1,1],
                 [1,0,1],
                 [0,1,0]])

Y_Train = array([[0],[1],[1],[0]])

"""**Train**"""

print("Starting Weights:        - X1:", weights[0,0], " X2:", weights[1,0], " X3:", weights[2,0],"\n")

epocs = 10000                                           #Number of epochs
i = 0
while i <= epocs:                                       #Loop
  Y_Predict = output(X_Train)                           #Prediction
  loss = Y_Train - Y_Predict                            #Loss function
  optimizer = dot(X_Train.T, loss*sig_d(Y_Predict))     #Optimizer function
  weights = weights + optimizer                         #Optimization
  i += 1
  if i % 100 == 0:
    print("Epocs: ", i, "           - X1:", weights[0,0], " X2:", weights[1,0], " X3:", weights[2,0],"\n")

"""**Test**"""

#Test function
def test(x):
  prediction = output(x)
  if prediction > 0.5:
    return 1
  else:
    return 0

#Test
print(test([1,1,1]))
print(test([1,1,0]))
print(test([1,0,1]))
print(test([1,0,0]))
print(test([0,1,1]))
print(test([0,1,0]))
print(test([0,0,1]))
print(test([0,0,0]))